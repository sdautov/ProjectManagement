// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.Models;

#nullable disable

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240708190117_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ProjectManagement.Models.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("ProjectManagement.Models.DesignObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ParentObjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DesignObjects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentationSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModificationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex(new[] { "DocumentationSetId", "DocumentTypeId", "Number" }, "idx_documents_unique")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ProjectManagement.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("ProjectManagement.Models.DocumentationSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DesignObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModificationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex(new[] { "DesignObjectId", "MarkId", "Number" }, "idx_documentation_sets_unique")
                        .IsUnique();

                    b.ToTable("DocumentationSets");
                });

            modelBuilder.Entity("ProjectManagement.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.DesignObject", b =>
                {
                    b.HasOne("ProjectManagement.Models.Contractor", "Contractor")
                        .WithMany("DesignObjects")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.DesignObject", "ParentObject")
                        .WithMany("InverseParentObject")
                        .HasForeignKey("ParentObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("DesignObjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("ParentObject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Document", b =>
                {
                    b.HasOne("ProjectManagement.Models.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.DocumentationSet", "DocumentationSet")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("DocumentationSet");
                });

            modelBuilder.Entity("ProjectManagement.Models.DocumentationSet", b =>
                {
                    b.HasOne("ProjectManagement.Models.DesignObject", "DesignObject")
                        .WithMany("DocumentationSets")
                        .HasForeignKey("DesignObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Mark", "Mark")
                        .WithMany("DocumentationSets")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignObject");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.HasOne("ProjectManagement.Models.Contractor", "Contractor")
                        .WithMany("Projects")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("ProjectManagement.Models.Contractor", b =>
                {
                    b.Navigation("DesignObjects");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.DesignObject", b =>
                {
                    b.Navigation("DocumentationSets");

                    b.Navigation("InverseParentObject");
                });

            modelBuilder.Entity("ProjectManagement.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProjectManagement.Models.DocumentationSet", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProjectManagement.Models.Mark", b =>
                {
                    b.Navigation("DocumentationSets");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.Navigation("DesignObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
